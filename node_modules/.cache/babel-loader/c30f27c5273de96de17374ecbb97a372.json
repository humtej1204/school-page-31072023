{"ast":null,"code":"var reactProperty = require('react-property');\n\nvar utilities = require('./utilities'); // https://reactjs.org/docs/uncontrolled-components.html\n// https://developer.mozilla.org/docs/Web/HTML/Attributes\n\n\nvar UNCONTROLLED_COMPONENT_ATTRIBUTES = ['checked', 'value'];\nvar UNCONTROLLED_COMPONENT_NAMES = ['input', 'select', 'textarea'];\nvar VALUE_ONLY_INPUTS = {\n  reset: true,\n  submit: true\n};\n/**\n * Converts HTML/SVG DOM attributes to React props.\n *\n * @param {object} [attributes={}] - HTML/SVG DOM attributes.\n * @param {string} [nodeName] - DOM node name.\n * @returns - React props.\n */\n\nmodule.exports = function attributesToProps(attributes, nodeName) {\n  attributes = attributes || {};\n  var attributeName;\n  var attributeNameLowerCased;\n  var attributeValue;\n  var propName;\n  var propertyInfo;\n  var props = {};\n  var inputIsValueOnly = attributes.type && VALUE_ONLY_INPUTS[attributes.type];\n\n  for (attributeName in attributes) {\n    attributeValue = attributes[attributeName]; // ARIA (aria-*) or custom data (data-*) attribute\n\n    if (reactProperty.isCustomAttribute(attributeName)) {\n      props[attributeName] = attributeValue;\n      continue;\n    } // convert HTML/SVG attribute to React prop\n\n\n    attributeNameLowerCased = attributeName.toLowerCase();\n    propName = getPropName(attributeNameLowerCased);\n\n    if (propName) {\n      propertyInfo = reactProperty.getPropertyInfo(propName); // convert attribute to uncontrolled component prop (e.g., `value` to `defaultValue`)\n\n      if (UNCONTROLLED_COMPONENT_ATTRIBUTES.indexOf(propName) !== -1 && UNCONTROLLED_COMPONENT_NAMES.indexOf(nodeName) !== -1 && !inputIsValueOnly) {\n        propName = getPropName('default' + attributeNameLowerCased);\n      }\n\n      props[propName] = attributeValue;\n\n      switch (propertyInfo && propertyInfo.type) {\n        case reactProperty.BOOLEAN:\n          props[propName] = true;\n          break;\n\n        case reactProperty.OVERLOADED_BOOLEAN:\n          if (attributeValue === '') {\n            props[propName] = true;\n          }\n\n          break;\n      }\n\n      continue;\n    } // preserve custom attribute if React >=16\n\n\n    if (utilities.PRESERVE_CUSTOM_ATTRIBUTES) {\n      props[attributeName] = attributeValue;\n    }\n  } // transform inline style to object\n\n\n  utilities.setStyleProp(attributes.style, props);\n  return props;\n};\n/**\n * Gets prop name from lowercased attribute name.\n *\n * @param {string} attributeName - Lowercased attribute name.\n * @returns - Prop name.\n */\n\n\nfunction getPropName(attributeName) {\n  return reactProperty.possibleStandardNames[attributeName];\n}","map":{"version":3,"names":["reactProperty","require","utilities","UNCONTROLLED_COMPONENT_ATTRIBUTES","UNCONTROLLED_COMPONENT_NAMES","VALUE_ONLY_INPUTS","reset","submit","module","exports","attributesToProps","attributes","nodeName","attributeName","attributeNameLowerCased","attributeValue","propName","propertyInfo","props","inputIsValueOnly","type","isCustomAttribute","toLowerCase","getPropName","getPropertyInfo","indexOf","BOOLEAN","OVERLOADED_BOOLEAN","PRESERVE_CUSTOM_ATTRIBUTES","setStyleProp","style","possibleStandardNames"],"sources":["/home/humtej1204/Frontend_practice/Desplegated_Proyects/school-page-31072023/node_modules/html-react-parser/lib/attributes-to-props.js"],"sourcesContent":["var reactProperty = require('react-property');\nvar utilities = require('./utilities');\n\n// https://reactjs.org/docs/uncontrolled-components.html\n// https://developer.mozilla.org/docs/Web/HTML/Attributes\nvar UNCONTROLLED_COMPONENT_ATTRIBUTES = ['checked', 'value'];\nvar UNCONTROLLED_COMPONENT_NAMES = ['input', 'select', 'textarea'];\n\nvar VALUE_ONLY_INPUTS = {\n  reset: true,\n  submit: true\n};\n\n/**\n * Converts HTML/SVG DOM attributes to React props.\n *\n * @param {object} [attributes={}] - HTML/SVG DOM attributes.\n * @param {string} [nodeName] - DOM node name.\n * @returns - React props.\n */\nmodule.exports = function attributesToProps(attributes, nodeName) {\n  attributes = attributes || {};\n\n  var attributeName;\n  var attributeNameLowerCased;\n  var attributeValue;\n  var propName;\n  var propertyInfo;\n  var props = {};\n  var inputIsValueOnly = attributes.type && VALUE_ONLY_INPUTS[attributes.type];\n\n  for (attributeName in attributes) {\n    attributeValue = attributes[attributeName];\n\n    // ARIA (aria-*) or custom data (data-*) attribute\n    if (reactProperty.isCustomAttribute(attributeName)) {\n      props[attributeName] = attributeValue;\n      continue;\n    }\n\n    // convert HTML/SVG attribute to React prop\n    attributeNameLowerCased = attributeName.toLowerCase();\n    propName = getPropName(attributeNameLowerCased);\n\n    if (propName) {\n      propertyInfo = reactProperty.getPropertyInfo(propName);\n\n      // convert attribute to uncontrolled component prop (e.g., `value` to `defaultValue`)\n      if (\n        UNCONTROLLED_COMPONENT_ATTRIBUTES.indexOf(propName) !== -1 &&\n        UNCONTROLLED_COMPONENT_NAMES.indexOf(nodeName) !== -1 &&\n        !inputIsValueOnly\n      ) {\n        propName = getPropName('default' + attributeNameLowerCased);\n      }\n\n      props[propName] = attributeValue;\n\n      switch (propertyInfo && propertyInfo.type) {\n        case reactProperty.BOOLEAN:\n          props[propName] = true;\n          break;\n        case reactProperty.OVERLOADED_BOOLEAN:\n          if (attributeValue === '') {\n            props[propName] = true;\n          }\n          break;\n      }\n      continue;\n    }\n\n    // preserve custom attribute if React >=16\n    if (utilities.PRESERVE_CUSTOM_ATTRIBUTES) {\n      props[attributeName] = attributeValue;\n    }\n  }\n\n  // transform inline style to object\n  utilities.setStyleProp(attributes.style, props);\n\n  return props;\n};\n\n/**\n * Gets prop name from lowercased attribute name.\n *\n * @param {string} attributeName - Lowercased attribute name.\n * @returns - Prop name.\n */\nfunction getPropName(attributeName) {\n  return reactProperty.possibleStandardNames[attributeName];\n}\n"],"mappings":"AAAA,IAAIA,aAAa,GAAGC,OAAO,CAAC,gBAAD,CAA3B;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAvB,C,CAEA;AACA;;;AACA,IAAIE,iCAAiC,GAAG,CAAC,SAAD,EAAY,OAAZ,CAAxC;AACA,IAAIC,4BAA4B,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,CAAnC;AAEA,IAAIC,iBAAiB,GAAG;EACtBC,KAAK,EAAE,IADe;EAEtBC,MAAM,EAAE;AAFc,CAAxB;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,iBAAT,CAA2BC,UAA3B,EAAuCC,QAAvC,EAAiD;EAChED,UAAU,GAAGA,UAAU,IAAI,EAA3B;EAEA,IAAIE,aAAJ;EACA,IAAIC,uBAAJ;EACA,IAAIC,cAAJ;EACA,IAAIC,QAAJ;EACA,IAAIC,YAAJ;EACA,IAAIC,KAAK,GAAG,EAAZ;EACA,IAAIC,gBAAgB,GAAGR,UAAU,CAACS,IAAX,IAAmBf,iBAAiB,CAACM,UAAU,CAACS,IAAZ,CAA3D;;EAEA,KAAKP,aAAL,IAAsBF,UAAtB,EAAkC;IAChCI,cAAc,GAAGJ,UAAU,CAACE,aAAD,CAA3B,CADgC,CAGhC;;IACA,IAAIb,aAAa,CAACqB,iBAAd,CAAgCR,aAAhC,CAAJ,EAAoD;MAClDK,KAAK,CAACL,aAAD,CAAL,GAAuBE,cAAvB;MACA;IACD,CAP+B,CAShC;;;IACAD,uBAAuB,GAAGD,aAAa,CAACS,WAAd,EAA1B;IACAN,QAAQ,GAAGO,WAAW,CAACT,uBAAD,CAAtB;;IAEA,IAAIE,QAAJ,EAAc;MACZC,YAAY,GAAGjB,aAAa,CAACwB,eAAd,CAA8BR,QAA9B,CAAf,CADY,CAGZ;;MACA,IACEb,iCAAiC,CAACsB,OAAlC,CAA0CT,QAA1C,MAAwD,CAAC,CAAzD,IACAZ,4BAA4B,CAACqB,OAA7B,CAAqCb,QAArC,MAAmD,CAAC,CADpD,IAEA,CAACO,gBAHH,EAIE;QACAH,QAAQ,GAAGO,WAAW,CAAC,YAAYT,uBAAb,CAAtB;MACD;;MAEDI,KAAK,CAACF,QAAD,CAAL,GAAkBD,cAAlB;;MAEA,QAAQE,YAAY,IAAIA,YAAY,CAACG,IAArC;QACE,KAAKpB,aAAa,CAAC0B,OAAnB;UACER,KAAK,CAACF,QAAD,CAAL,GAAkB,IAAlB;UACA;;QACF,KAAKhB,aAAa,CAAC2B,kBAAnB;UACE,IAAIZ,cAAc,KAAK,EAAvB,EAA2B;YACzBG,KAAK,CAACF,QAAD,CAAL,GAAkB,IAAlB;UACD;;UACD;MARJ;;MAUA;IACD,CAtC+B,CAwChC;;;IACA,IAAId,SAAS,CAAC0B,0BAAd,EAA0C;MACxCV,KAAK,CAACL,aAAD,CAAL,GAAuBE,cAAvB;IACD;EACF,CAvD+D,CAyDhE;;;EACAb,SAAS,CAAC2B,YAAV,CAAuBlB,UAAU,CAACmB,KAAlC,EAAyCZ,KAAzC;EAEA,OAAOA,KAAP;AACD,CA7DD;AA+DA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,WAAT,CAAqBV,aAArB,EAAoC;EAClC,OAAOb,aAAa,CAAC+B,qBAAd,CAAoClB,aAApC,CAAP;AACD"},"metadata":{},"sourceType":"script"}